@use 'sass:math';
@use 'sass:map';

////
/// Generic style functions
/// @group @d13/styles/tools
////

/// Scale function
/// @param {number} $multiplier - The multiplier to raise by.
/// @param {number} $ratio - The ratio to scale by.
/// @param {number} $base - The base value to scale from.
/// @return {number} - Number has the same unit type as the `$base`.
@function scale($multiplier, $ratio, $base) {
  @return $base * math.pow($ratio, $multiplier);
}

/// Wrapper function for map.get that provides error handling
/// @param {map} $map - The name of the defined type size.
/// @param {string} $key - The key in the map to lookup.
/// @param {string} $error-key ['item'] - Friendly name for the type of item in the map.
@function map-get-safe($map, $key, $error-key: 'item') {
  @if not map.has-key($map, $key) {
    @error ('The #{$error-key} "#{$key}" does not exist.');
  }
  @return map.get($map, $key);
}

/// Flattens a map's nested keys into kebab-cased strings
/// @param {map} $map
/// @return {map} Map with kebab-cased keys
@function flatten-map($map) {
  $new-map: ();

  @each $key, $value in $map {
    @if meta.type-of($value) == 'map' {
      $nested-map: flatten-map($value);

      @each $nested-key, $nested-value in $nested-map {
        $new-map: map.set($new-map, '#{$key}-#{$nested-key}', $nested-value);
      }
    } @else {
      $new-map: map.set($new-map, $key, $value);
    }
  }

  @return $new-map;
}
