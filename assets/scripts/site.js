(function () {
    'use strict';

    function on(element, type, listener, thisArg, capture) {
        capture || (capture = false);

        if (thisArg) {
            listener = listener.bind(thisArg);
        }

        element.addEventListener(type, listener, capture);

        return {
            off: function() {
                element.removeEventListener(type, listener, capture);
            }
        };
    }

    function debounceFrame(func) {
        let timer;
        return function() {
            const scope = this;
            const args = arguments;

            if (timer) cancelAnimationFrame(timer);

            timer = requestAnimationFrame(() => {
                func.apply(scope, args);
            });
        };
    }

    let vpW = window.innerWidth;
    let vpH = window.innerHeight;
    function elementIsVisible(el) {
        // FIXME: performance issue, cache this somewhere
        const rect = el.getBoundingClientRect();
        if (rect.top <= -rect.height || rect.top >= vpH) {
            return false;
        }

        if (rect.left <= -rect.width || rect.left >= vpW) {
            return false;
        }

        return true;
    }

    function detectVisibility(items, once) {
        items.forEach(el => {
            if (once && el.classList.contains('is-in-view')) {
                return;
            }

            if (elementIsVisible(el)) {
                el.classList.add('is-in-view');
            } else {
                el.classList.remove('is-in-view');
            }
        });
    }

    const listenerQueue = {};
    function detectAnimationVisibility() {
        console.log('detectAnimationVisibility');

        Object.keys(listenerQueue).map(key => listenerQueue[key]).forEach(_ => {
            detectVisibility(_.items, _.once);
        });
    }

    const debouncedDetectAnimationVisibility = debounceFrame(() => {
        detectAnimationVisibility();
    });

    let activeVisibility;
    function listenOnChanges() {
        if (!activeVisibility) {
            let events = [
                on(window, 'resize', () => {
                    console.log('resize');
                    vpW = window.innerWidth;
                    vpH = window.innerHeight;
                    debouncedDetectAnimationVisibility();
                }),
                on(window, 'scroll', () => {
                    console.log('scroll');
                    debouncedDetectAnimationVisibility();
                })
            ];

            activeVisibility = {
                off: () => {
                    events.forEach(_ => _.off());
                }
            };
        }

        return activeVisibility;
    }

    function monitorVisibility(selector, once) {
        if (!listenerQueue.hasOwnProperty(selector)) {
            const els = document.querySelectorAll(selector);
            if (els && els.length) {
                listenerQueue[selector] = {
                    items: els,
                    once: once || false
                };
                listenOnChanges();
            }
        }

        return {
            off: function() {
                activeVisibility && activeVisibility.off();
            }
        };
    }

    on(document, 'DOMContentLoaded', () => {
        monitorVisibility('.h-vp-in');
        monitorVisibility('.h-vp-in-once', true);

        // observeVisibility(document.querySelectorAll('.h-vp-in'));
        // observeVisibility(document.querySelectorAll('.h-vp-in-once'), true);
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
