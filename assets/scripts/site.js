(function () {
    'use strict';

    function debounceFrame(func) {
        let timer;
        return function() {
            const scope = this;
            const args = arguments;

            if (timer) cancelAnimationFrame(timer);

            timer = requestAnimationFrame(() => {
                func.apply(scope, args);
            });
        };
    }

    let lazyQueries = {};
    function lazyQueryAll(selector) {
        if (!lazyQueries.hasOwnProperty(selector)) {
            const els = document.querySelectorAll(selector);
            if (els.length) {
                lazyQueries[selector] = els;
            }
        }
        return lazyQueries[selector];
    }

    let vpW = window.innerWidth;
    let vpH = window.innerHeight;
    window.addEventListener('resize', debounceFrame(() => {
        console.log('resize');
        vpW = window.innerWidth;
        vpH = window.innerHeight;
    }), false);

    function elementIsVisible(el) {
        // FIXME: performance issue, cache this somewhere
        const rect = el.getBoundingClientRect();
        if (rect.top <= -rect.height || rect.top >= vpH) {
            return false;
        }

        if (rect.left <= -rect.width || rect.left >= vpW) {
            return false;
        }

        return true;
    }

    function detectVisibility(selector, once) {
        let selections = lazyQueryAll(selector);
        selections.forEach(el => {
            if (once && el.classList.contains('is-in-view')) {
                return;
            }

            if (elementIsVisible(el)) {
                el.classList.add('is-in-view');
            } else {
                el.classList.remove('is-in-view');
            }
        });
    }

    function detectAnimationVisibility() {
        detectVisibility('.h-vp-in');
        detectVisibility('.h-vp-in-once', true);
    }

    const debouncedDetectAnimationVisibility = debounceFrame(() => {
        detectAnimationVisibility();
    });

    window.addEventListener('scroll', () => {
        console.log('scrolling');
        debouncedDetectAnimationVisibility();
    }, false);

    document.addEventListener('DOMContentLoaded', () => {
        debouncedDetectAnimationVisibility();
    }, false);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL3NjcmlwdHMvc2l0ZS5qcyIsInNvdXJjZXMiOlsic3JjL3NjcmlwdHMvdXRpbHMvZGVsYXlzLmpzIiwic3JjL3NjcmlwdHMvc2l0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZGVib3VuY2VGcmFtZShmdW5jKSB7XHJcbiAgICBsZXQgdGltZXI7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcblxyXG4gICAgICAgIGlmICh0aW1lcikgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGltZXIpO1xyXG5cclxuICAgICAgICB0aW1lciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoc2NvcGUsIGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHRpbWUpIHtcclxuICAgIGxldCB0aW1lcjtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgaWYgKHRpbWVyKSBjbGVhclRpbWVvdXQodGltZXIpO1xyXG5cclxuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHNjb3BlLCBhcmdzKTtcclxuICAgICAgICB9LCB0aW1lKTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB0aW1lKSB7XHJcbiAgICBsZXQgd2FpdDtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAod2FpdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBmdW5jKCkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB3YWl0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHdhaXQgPSBmYWxzZTtcclxuICAgICAgICB9LCB0aW1lKTtcclxuICAgIH07XHJcbn0iLCJpbXBvcnQgeyBkZWJvdW5jZUZyYW1lIH0gZnJvbSBcIi4vdXRpbHMvZGVsYXlzXCI7XHJcblxyXG5sZXQgbGF6eVF1ZXJpZXMgPSB7fTtcclxuZnVuY3Rpb24gbGF6eVF1ZXJ5QWxsKHNlbGVjdG9yKSB7XHJcbiAgICBpZiAoIWxhenlRdWVyaWVzLmhhc093blByb3BlcnR5KHNlbGVjdG9yKSkge1xyXG4gICAgICAgIGNvbnN0IGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgIGlmIChlbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxhenlRdWVyaWVzW3NlbGVjdG9yXSA9IGVscztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGF6eVF1ZXJpZXNbc2VsZWN0b3JdO1xyXG59XHJcblxyXG5sZXQgdnBXID0gd2luZG93LmlubmVyV2lkdGg7XHJcbmxldCB2cEggPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZUZyYW1lKCgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdyZXNpemUnKTtcclxuICAgIHZwVyA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgdnBIID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG59KSwgZmFsc2UpO1xyXG5cclxuZnVuY3Rpb24gZWxlbWVudElzVmlzaWJsZShlbCkge1xyXG4gICAgLy8gRklYTUU6IHBlcmZvcm1hbmNlIGlzc3VlLCBjYWNoZSB0aGlzIHNvbWV3aGVyZVxyXG4gICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgaWYgKHJlY3QudG9wIDw9IC1yZWN0LmhlaWdodCB8fCByZWN0LnRvcCA+PSB2cEgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlY3QubGVmdCA8PSAtcmVjdC53aWR0aCB8fCByZWN0LmxlZnQgPj0gdnBXKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZXRlY3RWaXNpYmlsaXR5KHNlbGVjdG9yLCBvbmNlKSB7XHJcbiAgICBsZXQgc2VsZWN0aW9ucyA9IGxhenlRdWVyeUFsbChzZWxlY3Rvcik7XHJcbiAgICBzZWxlY3Rpb25zLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgIGlmIChvbmNlICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygnaXMtaW4tdmlldycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50SXNWaXNpYmxlKGVsKSkge1xyXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdpcy1pbi12aWV3Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtaW4tdmlldycpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZXRlY3RBbmltYXRpb25WaXNpYmlsaXR5KCkge1xyXG4gICAgZGV0ZWN0VmlzaWJpbGl0eSgnLmgtdnAtaW4nKTtcclxuICAgIGRldGVjdFZpc2liaWxpdHkoJy5oLXZwLWluLW9uY2UnLCB0cnVlKTtcclxufVxyXG5cclxuY29uc3QgZGVib3VuY2VkRGV0ZWN0QW5pbWF0aW9uVmlzaWJpbGl0eSA9IGRlYm91bmNlRnJhbWUoKCkgPT4ge1xyXG4gICAgZGV0ZWN0QW5pbWF0aW9uVmlzaWJpbGl0eSgpO1xyXG59KTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnc2Nyb2xsaW5nJyk7XHJcbiAgICBkZWJvdW5jZWREZXRlY3RBbmltYXRpb25WaXNpYmlsaXR5KCk7XHJcbn0sIGZhbHNlKTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBkZWJvdW5jZWREZXRlY3RBbmltYXRpb25WaXNpYmlsaXR5KCk7XHJcbn0sIGZhbHNlKTsiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQU8sU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFO0lBQ3BDLElBQUksSUFBSSxLQUFLLENBQUM7SUFDZCxJQUFJLE9BQU8sV0FBVztJQUN0QixRQUFRLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztJQUMzQixRQUFRLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQzs7SUFFL0IsUUFBUSxJQUFJLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7SUFFL0MsUUFBUSxLQUFLLEdBQUcscUJBQXFCLENBQUMsTUFBTTtJQUM1QyxZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BDLFNBQVMsQ0FBQyxDQUFDO0lBQ1gsS0FBSyxDQUFDO0lBQ04sQ0FBQzs7SUNWRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDckIsU0FBUyxZQUFZLENBQUMsUUFBUSxFQUFFO0lBQ2hDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDL0MsUUFBUSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEQsUUFBUSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7SUFDeEIsWUFBWSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3hD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
