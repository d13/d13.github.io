(function () {
  'use strict';

  function on(element, type, listener, thisArg, capture = false) {
    if (thisArg) {
      listener = listener.bind(thisArg);
    }

    element.addEventListener(type, listener, capture);

    return {
      off: function () {
        element.removeEventListener(type, listener, capture);
      }
    };
  }

  function once(element, type, listener, thisArg, capture) {
    if (thisArg) {
      listener = listener.bind(thisArg);
    }

    const inst = on(element, type, () => {
      listener.apply(thisArg, arguments);
      if (inst) {
        inst.off();
      }
    }, thisArg, capture);

    return inst;
  }

  function debounceFrame(func) {
      let timer;
      return function() {
          const scope = this;
          const args = arguments;

          if (timer) cancelAnimationFrame(timer);

          timer = requestAnimationFrame(() => {
              func.apply(scope, args);
          });
      };
  }

  let vpW = window.innerWidth;
  let vpH = window.innerHeight;
  function elementIsVisible(el) {
    // FIXME: performance issue, cache this somewhere
    const rect = el.getBoundingClientRect();
    if (rect.top <= -rect.height || rect.top >= vpH) {
      return false;
    }

    if (rect.left <= -rect.width || rect.left >= vpW) {
      return false;
    }

    return true;
  }

  const isInView = el => el.classList.contains('is-in-view');

  function detectVisibility(items, doOnce) {
    return Promise.all(items.map(el => {
      return new Promise((resolve) => {
        if (doOnce && isInView(el)) {
          //console.log('This probably should not happen');
          resolve();
          return;
        }

        if (el.classList.contains('is-animating')) {
          resolve();
          return;
        }

        if (!elementIsVisible(el)) {
          el.classList.remove('is-in-view');
          resolve();
        } else if (!isInView(el)) {
          once(el, 'animationend', () => {
            el.classList.remove('is-animating');
            resolve();
          });
          el.classList.add('is-animating', 'is-in-view');
        } else {
          resolve();
        }
      });
    }));
  }

  const listenerQueue = {};
  function detectAnimationVisibility() {
    //console.log('detectAnimationVisibility');

    Object.keys(listenerQueue).forEach(key => {
      const _ = listenerQueue[key];

      const p = detectVisibility(_.items, _.once);

      if (_.once) {
        p.then(() => {
          _.items = _.items.filter(el => !isInView(el));

          if (!_.items.length && listenerQueue[key]) {
            //console.log(key, 'has none left');
            delete listenerQueue[key];
          }
        });
      }
    });
  }

  const debouncedDetectAnimationVisibility = debounceFrame(() => {
    detectAnimationVisibility();
  });

  let activeVisibility;
  function listenOnChanges() {
    if (!activeVisibility) {
      const events = [
        on(window, 'resize', () => {
          //console.log('resize');
          vpW = window.innerWidth;
          vpH = window.innerHeight;
          debouncedDetectAnimationVisibility();
        }),
        on(window, 'scroll', () => {
          //console.log('scroll');
          debouncedDetectAnimationVisibility();
        })
      ];

      debouncedDetectAnimationVisibility();

      activeVisibility = {
        off: () => {
          events.forEach(_ => _.off());
        }
      };
    }

    return activeVisibility;
  }

  function monitorVisibility(selector, doOnce) {
    if (!listenerQueue.hasOwnProperty(selector)) {
      const els = Array.prototype.slice.call(document.querySelectorAll(selector));
      if (els && els.length) {
        listenerQueue[selector] = {
          items: els,
          once: doOnce || false
        };
        listenOnChanges();
      }
    }

    return {
      off: function() {
        activeVisibility && activeVisibility.off();
      }
    };
  }

  on(document, 'DOMContentLoaded', () => {
      monitorVisibility('.h-vp-in');
      monitorVisibility('.h-vp-in-once', true);

      // observeVisibility(document.querySelectorAll('.h-vp-in'));
      // observeVisibility(document.querySelectorAll('.h-vp-in-once'), true);
  });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
